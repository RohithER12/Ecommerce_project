// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/orderRepository.go

// Package mockRepo is a generated GoMock package.
package mockRepo

import (
	deliverymodels "70_Off/delivery/deliveryModels"
	entity "70_Off/domain/entity"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// DeleteOrder mocks base method.
func (m *MockOrderRepository) DeleteOrder(order *entity.Orders) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockOrderRepositoryMockRecorder) DeleteOrder(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockOrderRepository)(nil).DeleteOrder), order)
}

// DeleteOrderItem mocks base method.
func (m *MockOrderRepository) DeleteOrderItem(order *entity.OrderItems) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrderItem", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrderItem indicates an expected call of DeleteOrderItem.
func (mr *MockOrderRepositoryMockRecorder) DeleteOrderItem(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderItem", reflect.TypeOf((*MockOrderRepository)(nil).DeleteOrderItem), order)
}

// FindAllOrderItemsByOrderID mocks base method.
func (m *MockOrderRepository) FindAllOrderItemsByOrderID(orderID uint) ([]deliverymodels.ViewOrdersForUsers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllOrderItemsByOrderID", orderID)
	ret0, _ := ret[0].([]deliverymodels.ViewOrdersForUsers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllOrderItemsByOrderID indicates an expected call of FindAllOrderItemsByOrderID.
func (mr *MockOrderRepositoryMockRecorder) FindAllOrderItemsByOrderID(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllOrderItemsByOrderID", reflect.TypeOf((*MockOrderRepository)(nil).FindAllOrderItemsByOrderID), orderID)
}

// FindOrderById mocks base method.
func (m *MockOrderRepository) FindOrderById(id uint) (*entity.Orders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrderById", id)
	ret0, _ := ret[0].(*entity.Orders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrderById indicates an expected call of FindOrderById.
func (mr *MockOrderRepositoryMockRecorder) FindOrderById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrderById", reflect.TypeOf((*MockOrderRepository)(nil).FindOrderById), id)
}

// FindOrderItemById mocks base method.
func (m *MockOrderRepository) FindOrderItemById(id uint) (*entity.OrderItems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrderItemById", id)
	ret0, _ := ret[0].(*entity.OrderItems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrderItemById indicates an expected call of FindOrderItemById.
func (mr *MockOrderRepositoryMockRecorder) FindOrderItemById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrderItemById", reflect.TypeOf((*MockOrderRepository)(nil).FindOrderItemById), id)
}

// FindOrderItemByUserId mocks base method.
func (m *MockOrderRepository) FindOrderItemByUserId(userId uint) ([]entity.OrderItems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrderItemByUserId", userId)
	ret0, _ := ret[0].([]entity.OrderItems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrderItemByUserId indicates an expected call of FindOrderItemByUserId.
func (mr *MockOrderRepositoryMockRecorder) FindOrderItemByUserId(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrderItemByUserId", reflect.TypeOf((*MockOrderRepository)(nil).FindOrderItemByUserId), userId)
}

// FindOrdersByUserId mocks base method.
func (m *MockOrderRepository) FindOrdersByUserId(userId uint) ([]entity.Orders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrdersByUserId", userId)
	ret0, _ := ret[0].([]entity.Orders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrdersByUserId indicates an expected call of FindOrdersByUserId.
func (mr *MockOrderRepositoryMockRecorder) FindOrdersByUserId(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrdersByUserId", reflect.TypeOf((*MockOrderRepository)(nil).FindOrdersByUserId), userId)
}

// GetOrderStatistics mocks base method.
func (m *MockOrderRepository) GetOrderStatistics(startDate, endDate time.Time) (int64, float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderStatistics", startDate, endDate)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(float64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrderStatistics indicates an expected call of GetOrderStatistics.
func (mr *MockOrderRepositoryMockRecorder) GetOrderStatistics(startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderStatistics", reflect.TypeOf((*MockOrderRepository)(nil).GetOrderStatistics), startDate, endDate)
}

// ListUserOrderItemPaginated mocks base method.
func (m *MockOrderRepository) ListUserOrderItemPaginated(userID uint, offset, limit int) ([]deliverymodels.ViewOrdersForUsers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserOrderItemPaginated", userID, offset, limit)
	ret0, _ := ret[0].([]deliverymodels.ViewOrdersForUsers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserOrderItemPaginated indicates an expected call of ListUserOrderItemPaginated.
func (mr *MockOrderRepositoryMockRecorder) ListUserOrderItemPaginated(userID, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserOrderItemPaginated", reflect.TypeOf((*MockOrderRepository)(nil).ListUserOrderItemPaginated), userID, offset, limit)
}

// ListUserOrdersPaginated mocks base method.
func (m *MockOrderRepository) ListUserOrdersPaginated(userID uint, offset, limit int) ([]entity.Orders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserOrdersPaginated", userID, offset, limit)
	ret0, _ := ret[0].([]entity.Orders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserOrdersPaginated indicates an expected call of ListUserOrdersPaginated.
func (mr *MockOrderRepositoryMockRecorder) ListUserOrdersPaginated(userID, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserOrdersPaginated", reflect.TypeOf((*MockOrderRepository)(nil).ListUserOrdersPaginated), userID, offset, limit)
}

// SaveOrder mocks base method.
func (m *MockOrderRepository) SaveOrder(order *entity.Orders) (*entity.Orders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrder", order)
	ret0, _ := ret[0].(*entity.Orders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveOrder indicates an expected call of SaveOrder.
func (mr *MockOrderRepositoryMockRecorder) SaveOrder(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrder", reflect.TypeOf((*MockOrderRepository)(nil).SaveOrder), order)
}

// SaveOrderItem mocks base method.
func (m *MockOrderRepository) SaveOrderItem(order *entity.OrderItems) (*entity.OrderItems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrderItem", order)
	ret0, _ := ret[0].(*entity.OrderItems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveOrderItem indicates an expected call of SaveOrderItem.
func (mr *MockOrderRepositoryMockRecorder) SaveOrderItem(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrderItem", reflect.TypeOf((*MockOrderRepository)(nil).SaveOrderItem), order)
}

// UpdateOrder mocks base method.
func (m *MockOrderRepository) UpdateOrder(order *entity.Orders) (*entity.Orders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", order)
	ret0, _ := ret[0].(*entity.Orders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOrderRepositoryMockRecorder) UpdateOrder(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrderRepository)(nil).UpdateOrder), order)
}

// UpdateOrderItem mocks base method.
func (m *MockOrderRepository) UpdateOrderItem(order *entity.OrderItems) (*entity.OrderItems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderItem", order)
	ret0, _ := ret[0].(*entity.OrderItems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderItem indicates an expected call of UpdateOrderItem.
func (mr *MockOrderRepositoryMockRecorder) UpdateOrderItem(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderItem", reflect.TypeOf((*MockOrderRepository)(nil).UpdateOrderItem), order)
}
