// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/cartItemRepository.go

// Package mockRepo is a generated GoMock package.
package mockRepo

import (
	deliverymodels "70_Off/delivery/deliveryModels"
	entity "70_Off/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCartItemRepository is a mock of CartItemRepository interface.
type MockCartItemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCartItemRepositoryMockRecorder
}

// MockCartItemRepositoryMockRecorder is the mock recorder for MockCartItemRepository.
type MockCartItemRepositoryMockRecorder struct {
	mock *MockCartItemRepository
}

// NewMockCartItemRepository creates a new mock instance.
func NewMockCartItemRepository(ctrl *gomock.Controller) *MockCartItemRepository {
	mock := &MockCartItemRepository{ctrl: ctrl}
	mock.recorder = &MockCartItemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartItemRepository) EXPECT() *MockCartItemRepositoryMockRecorder {
	return m.recorder
}

// DeleteCartItem mocks base method.
func (m *MockCartItemRepository) DeleteCartItem(cartItem *entity.CartItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCartItem", cartItem)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCartItem indicates an expected call of DeleteCartItem.
func (mr *MockCartItemRepositoryMockRecorder) DeleteCartItem(cartItem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCartItem", reflect.TypeOf((*MockCartItemRepository)(nil).DeleteCartItem), cartItem)
}

// DeleteCartItemWithQuantity mocks base method.
func (m *MockCartItemRepository) DeleteCartItemWithQuantity(cartItemID, quantity uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCartItemWithQuantity", cartItemID, quantity)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCartItemWithQuantity indicates an expected call of DeleteCartItemWithQuantity.
func (mr *MockCartItemRepositoryMockRecorder) DeleteCartItemWithQuantity(cartItemID, quantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCartItemWithQuantity", reflect.TypeOf((*MockCartItemRepository)(nil).DeleteCartItemWithQuantity), cartItemID, quantity)
}

// FindAllCartItemsByCartID mocks base method.
func (m *MockCartItemRepository) FindAllCartItemsByCartID(cartID uint) ([]entity.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllCartItemsByCartID", cartID)
	ret0, _ := ret[0].([]entity.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllCartItemsByCartID indicates an expected call of FindAllCartItemsByCartID.
func (mr *MockCartItemRepositoryMockRecorder) FindAllCartItemsByCartID(cartID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllCartItemsByCartID", reflect.TypeOf((*MockCartItemRepository)(nil).FindAllCartItemsByCartID), cartID)
}

// FindAllCartItemsByCartIDForUser mocks base method.
func (m *MockCartItemRepository) FindAllCartItemsByCartIDForUser(cartID uint) ([]deliverymodels.ViewCartDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllCartItemsByCartIDForUser", cartID)
	ret0, _ := ret[0].([]deliverymodels.ViewCartDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllCartItemsByCartIDForUser indicates an expected call of FindAllCartItemsByCartIDForUser.
func (mr *MockCartItemRepositoryMockRecorder) FindAllCartItemsByCartIDForUser(cartID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllCartItemsByCartIDForUser", reflect.TypeOf((*MockCartItemRepository)(nil).FindAllCartItemsByCartIDForUser), cartID)
}

// FindCartItemByCartAndProduct mocks base method.
func (m *MockCartItemRepository) FindCartItemByCartAndProduct(cartID, productID uint) (*entity.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCartItemByCartAndProduct", cartID, productID)
	ret0, _ := ret[0].(*entity.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCartItemByCartAndProduct indicates an expected call of FindCartItemByCartAndProduct.
func (mr *MockCartItemRepositoryMockRecorder) FindCartItemByCartAndProduct(cartID, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCartItemByCartAndProduct", reflect.TypeOf((*MockCartItemRepository)(nil).FindCartItemByCartAndProduct), cartID, productID)
}

// FindCartItemByID mocks base method.
func (m *MockCartItemRepository) FindCartItemByID(id uint) (*entity.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCartItemByID", id)
	ret0, _ := ret[0].(*entity.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCartItemByID indicates an expected call of FindCartItemByID.
func (mr *MockCartItemRepositoryMockRecorder) FindCartItemByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCartItemByID", reflect.TypeOf((*MockCartItemRepository)(nil).FindCartItemByID), id)
}

// FindCartItemByUserIdAndProductDetailsID mocks base method.
func (m *MockCartItemRepository) FindCartItemByUserIdAndProductDetailsID(userId, productDetailsId uint) (*entity.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCartItemByUserIdAndProductDetailsID", userId, productDetailsId)
	ret0, _ := ret[0].(*entity.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCartItemByUserIdAndProductDetailsID indicates an expected call of FindCartItemByUserIdAndProductDetailsID.
func (mr *MockCartItemRepositoryMockRecorder) FindCartItemByUserIdAndProductDetailsID(userId, productDetailsId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCartItemByUserIdAndProductDetailsID", reflect.TypeOf((*MockCartItemRepository)(nil).FindCartItemByUserIdAndProductDetailsID), userId, productDetailsId)
}

// FindCartItemsByCartID mocks base method.
func (m *MockCartItemRepository) FindCartItemsByCartID(cartID uint) (*entity.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCartItemsByCartID", cartID)
	ret0, _ := ret[0].(*entity.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCartItemsByCartID indicates an expected call of FindCartItemsByCartID.
func (mr *MockCartItemRepositoryMockRecorder) FindCartItemsByCartID(cartID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCartItemsByCartID", reflect.TypeOf((*MockCartItemRepository)(nil).FindCartItemsByCartID), cartID)
}

// SaveCartItem mocks base method.
func (m *MockCartItemRepository) SaveCartItem(cartItem *entity.CartItem) (*entity.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCartItem", cartItem)
	ret0, _ := ret[0].(*entity.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveCartItem indicates an expected call of SaveCartItem.
func (mr *MockCartItemRepositoryMockRecorder) SaveCartItem(cartItem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCartItem", reflect.TypeOf((*MockCartItemRepository)(nil).SaveCartItem), cartItem)
}

// UpdateCartItem mocks base method.
func (m *MockCartItemRepository) UpdateCartItem(cartItem *entity.CartItem) (*entity.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCartItem", cartItem)
	ret0, _ := ret[0].(*entity.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCartItem indicates an expected call of UpdateCartItem.
func (mr *MockCartItemRepositoryMockRecorder) UpdateCartItem(cartItem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCartItem", reflect.TypeOf((*MockCartItemRepository)(nil).UpdateCartItem), cartItem)
}
