// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/cartRepository.go

// Package mockRepo is a generated GoMock package.
package mockRepo

import (
	entity "70_Off/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCartRepository is a mock of CartRepository interface.
type MockCartRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCartRepositoryMockRecorder
}

// MockCartRepositoryMockRecorder is the mock recorder for MockCartRepository.
type MockCartRepositoryMockRecorder struct {
	mock *MockCartRepository
}

// NewMockCartRepository creates a new mock instance.
func NewMockCartRepository(ctrl *gomock.Controller) *MockCartRepository {
	mock := &MockCartRepository{ctrl: ctrl}
	mock.recorder = &MockCartRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartRepository) EXPECT() *MockCartRepositoryMockRecorder {
	return m.recorder
}

// DeleteCart mocks base method.
func (m *MockCartRepository) DeleteCart(cart *entity.Cart) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCart", cart)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCart indicates an expected call of DeleteCart.
func (mr *MockCartRepositoryMockRecorder) DeleteCart(cart interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCart", reflect.TypeOf((*MockCartRepository)(nil).DeleteCart), cart)
}

// FindCartByID mocks base method.
func (m *MockCartRepository) FindCartByID(id uint) (*entity.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCartByID", id)
	ret0, _ := ret[0].(*entity.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCartByID indicates an expected call of FindCartByID.
func (mr *MockCartRepositoryMockRecorder) FindCartByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCartByID", reflect.TypeOf((*MockCartRepository)(nil).FindCartByID), id)
}

// FindCartByUserID mocks base method.
func (m *MockCartRepository) FindCartByUserID(userID uint) (*entity.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCartByUserID", userID)
	ret0, _ := ret[0].(*entity.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCartByUserID indicates an expected call of FindCartByUserID.
func (mr *MockCartRepositoryMockRecorder) FindCartByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCartByUserID", reflect.TypeOf((*MockCartRepository)(nil).FindCartByUserID), userID)
}

// FindCartsByUserID mocks base method.
func (m *MockCartRepository) FindCartsByUserID(userID uint) (*entity.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCartsByUserID", userID)
	ret0, _ := ret[0].(*entity.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCartsByUserID indicates an expected call of FindCartsByUserID.
func (mr *MockCartRepositoryMockRecorder) FindCartsByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCartsByUserID", reflect.TypeOf((*MockCartRepository)(nil).FindCartsByUserID), userID)
}

// SaveCart mocks base method.
func (m *MockCartRepository) SaveCart(cart *entity.Cart) (*entity.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCart", cart)
	ret0, _ := ret[0].(*entity.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveCart indicates an expected call of SaveCart.
func (mr *MockCartRepositoryMockRecorder) SaveCart(cart interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCart", reflect.TypeOf((*MockCartRepository)(nil).SaveCart), cart)
}

// UpdateCart mocks base method.
func (m *MockCartRepository) UpdateCart(cart *entity.Cart) (*entity.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCart", cart)
	ret0, _ := ret[0].(*entity.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCart indicates an expected call of UpdateCart.
func (mr *MockCartRepositoryMockRecorder) UpdateCart(cart interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCart", reflect.TypeOf((*MockCartRepository)(nil).UpdateCart), cart)
}
