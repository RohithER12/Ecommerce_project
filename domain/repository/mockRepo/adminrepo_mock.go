// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/adminRepository.go

// Package mockRepo is a generated GoMock package.
package mockRepo

import (
	entity "70_Off/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAdminRepository is a mock of AdminRepository interface.
type MockAdminRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAdminRepositoryMockRecorder
}

// MockAdminRepositoryMockRecorder is the mock recorder for MockAdminRepository.
type MockAdminRepositoryMockRecorder struct {
	mock *MockAdminRepository
}

// NewMockAdminRepository creates a new mock instance.
func NewMockAdminRepository(ctrl *gomock.Controller) *MockAdminRepository {
	mock := &MockAdminRepository{ctrl: ctrl}
	mock.recorder = &MockAdminRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminRepository) EXPECT() *MockAdminRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAdminRepository) Create(admin *entity.Admin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", admin)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAdminRepositoryMockRecorder) Create(admin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAdminRepository)(nil).Create), admin)
}

// GetByEmail mocks base method.
func (m *MockAdminRepository) GetByEmail(email string) (*entity.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", email)
	ret0, _ := ret[0].(*entity.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockAdminRepositoryMockRecorder) GetByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockAdminRepository)(nil).GetByEmail), email)
}

// GetByID mocks base method.
func (m *MockAdminRepository) GetByID(id uint) (*entity.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*entity.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockAdminRepositoryMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockAdminRepository)(nil).GetByID), id)
}

// GetByPhoneNumber mocks base method.
func (m *MockAdminRepository) GetByPhoneNumber(phoneNumber string) (*entity.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPhoneNumber", phoneNumber)
	ret0, _ := ret[0].(*entity.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPhoneNumber indicates an expected call of GetByPhoneNumber.
func (mr *MockAdminRepositoryMockRecorder) GetByPhoneNumber(phoneNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPhoneNumber", reflect.TypeOf((*MockAdminRepository)(nil).GetByPhoneNumber), phoneNumber)
}

// Update mocks base method.
func (m *MockAdminRepository) Update(admin *entity.Admin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", admin)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAdminRepositoryMockRecorder) Update(admin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAdminRepository)(nil).Update), admin)
}
