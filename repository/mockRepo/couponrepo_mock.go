// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/couponRepository.go

// Package mockRepo is a generated GoMock package.
package mockRepo

import (
	entity "70_Off/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCouponRepository is a mock of CouponRepository interface.
type MockCouponRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCouponRepositoryMockRecorder
}

// MockCouponRepositoryMockRecorder is the mock recorder for MockCouponRepository.
type MockCouponRepositoryMockRecorder struct {
	mock *MockCouponRepository
}

// NewMockCouponRepository creates a new mock instance.
func NewMockCouponRepository(ctrl *gomock.Controller) *MockCouponRepository {
	mock := &MockCouponRepository{ctrl: ctrl}
	mock.recorder = &MockCouponRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCouponRepository) EXPECT() *MockCouponRepositoryMockRecorder {
	return m.recorder
}

// CreateCoupon mocks base method.
func (m *MockCouponRepository) CreateCoupon(coupon *entity.Coupon) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCoupon", coupon)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCoupon indicates an expected call of CreateCoupon.
func (mr *MockCouponRepositoryMockRecorder) CreateCoupon(coupon interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCoupon", reflect.TypeOf((*MockCouponRepository)(nil).CreateCoupon), coupon)
}

// DeleteCoupon mocks base method.
func (m *MockCouponRepository) DeleteCoupon(coupon *entity.Coupon) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCoupon", coupon)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCoupon indicates an expected call of DeleteCoupon.
func (mr *MockCouponRepositoryMockRecorder) DeleteCoupon(coupon interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCoupon", reflect.TypeOf((*MockCouponRepository)(nil).DeleteCoupon), coupon)
}

// GetAllCoupons mocks base method.
func (m *MockCouponRepository) GetAllCoupons() ([]*entity.Coupon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCoupons")
	ret0, _ := ret[0].([]*entity.Coupon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCoupons indicates an expected call of GetAllCoupons.
func (mr *MockCouponRepositoryMockRecorder) GetAllCoupons() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCoupons", reflect.TypeOf((*MockCouponRepository)(nil).GetAllCoupons))
}

// GetCouponByCouponCode mocks base method.
func (m *MockCouponRepository) GetCouponByCouponCode(CouponCode string) (*entity.Coupon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCouponByCouponCode", CouponCode)
	ret0, _ := ret[0].(*entity.Coupon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCouponByCouponCode indicates an expected call of GetCouponByCouponCode.
func (mr *MockCouponRepositoryMockRecorder) GetCouponByCouponCode(CouponCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCouponByCouponCode", reflect.TypeOf((*MockCouponRepository)(nil).GetCouponByCouponCode), CouponCode)
}

// GetCouponByID mocks base method.
func (m *MockCouponRepository) GetCouponByID(id uint) (*entity.Coupon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCouponByID", id)
	ret0, _ := ret[0].(*entity.Coupon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCouponByID indicates an expected call of GetCouponByID.
func (mr *MockCouponRepositoryMockRecorder) GetCouponByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCouponByID", reflect.TypeOf((*MockCouponRepository)(nil).GetCouponByID), id)
}

// UpdateCoupon mocks base method.
func (m *MockCouponRepository) UpdateCoupon(coupon *entity.Coupon) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCoupon", coupon)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCoupon indicates an expected call of UpdateCoupon.
func (mr *MockCouponRepositoryMockRecorder) UpdateCoupon(coupon interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCoupon", reflect.TypeOf((*MockCouponRepository)(nil).UpdateCoupon), coupon)
}
