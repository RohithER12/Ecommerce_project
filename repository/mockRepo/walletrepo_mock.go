// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/walletRepository.go

// Package mockRepo is a generated GoMock package.
package mockRepo

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWalletRepository is a mock of WalletRepository interface.
type MockWalletRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWalletRepositoryMockRecorder
}

// MockWalletRepositoryMockRecorder is the mock recorder for MockWalletRepository.
type MockWalletRepositoryMockRecorder struct {
	mock *MockWalletRepository
}

// NewMockWalletRepository creates a new mock instance.
func NewMockWalletRepository(ctrl *gomock.Controller) *MockWalletRepository {
	mock := &MockWalletRepository{ctrl: ctrl}
	mock.recorder = &MockWalletRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletRepository) EXPECT() *MockWalletRepositoryMockRecorder {
	return m.recorder
}

// DepositToWallet mocks base method.
func (m *MockWalletRepository) DepositToWallet(userID uint, amount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DepositToWallet", userID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// DepositToWallet indicates an expected call of DepositToWallet.
func (mr *MockWalletRepositoryMockRecorder) DepositToWallet(userID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DepositToWallet", reflect.TypeOf((*MockWalletRepository)(nil).DepositToWallet), userID, amount)
}

// GetWalletBalance mocks base method.
func (m *MockWalletRepository) GetWalletBalance(userID uint) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletBalance", userID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletBalance indicates an expected call of GetWalletBalance.
func (mr *MockWalletRepositoryMockRecorder) GetWalletBalance(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletBalance", reflect.TypeOf((*MockWalletRepository)(nil).GetWalletBalance), userID)
}

// GetWalletByUserID mocks base method.
func (m *MockWalletRepository) GetWalletByUserID(userID uint) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByUserID", userID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByUserID indicates an expected call of GetWalletByUserID.
func (mr *MockWalletRepositoryMockRecorder) GetWalletByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByUserID", reflect.TypeOf((*MockWalletRepository)(nil).GetWalletByUserID), userID)
}

// WithdrawFromWallet mocks base method.
func (m *MockWalletRepository) WithdrawFromWallet(userID uint, amount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawFromWallet", userID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithdrawFromWallet indicates an expected call of WithdrawFromWallet.
func (mr *MockWalletRepositoryMockRecorder) WithdrawFromWallet(userID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawFromWallet", reflect.TypeOf((*MockWalletRepository)(nil).WithdrawFromWallet), userID, amount)
}
