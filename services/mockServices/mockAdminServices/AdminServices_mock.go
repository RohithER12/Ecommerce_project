// Code generated by MockGen. DO NOT EDIT.
// Source: adminServices.go

// Package mockAdminServices is a generated GoMock package.
package mockAdminServices

import (
	deliverymodels "70_Off/delivery/deliveryModels"
	entity "70_Off/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAdminService is a mock of AdminService interface.
type MockAdminService struct {
	ctrl     *gomock.Controller
	recorder *MockAdminServiceMockRecorder
}

// MockAdminServiceMockRecorder is the mock recorder for MockAdminService.
type MockAdminServiceMockRecorder struct {
	mock *MockAdminService
}

// NewMockAdminService creates a new mock instance.
func NewMockAdminService(ctrl *gomock.Controller) *MockAdminService {
	mock := &MockAdminService{ctrl: ctrl}
	mock.recorder = &MockAdminServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminService) EXPECT() *MockAdminServiceMockRecorder {
	return m.recorder
}

// AddCoupon mocks base method.
func (m *MockAdminService) AddCoupon(coupon entity.Coupon) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCoupon", coupon)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCoupon indicates an expected call of AddCoupon.
func (mr *MockAdminServiceMockRecorder) AddCoupon(coupon interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCoupon", reflect.TypeOf((*MockAdminService)(nil).AddCoupon), coupon)
}

// AdminValidateLogin mocks base method.
func (m *MockAdminService) AdminValidateLogin(adminLoginInput *deliverymodels.AdmionLoginInputs) (*entity.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminValidateLogin", adminLoginInput)
	ret0, _ := ret[0].(*entity.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminValidateLogin indicates an expected call of AdminValidateLogin.
func (mr *MockAdminServiceMockRecorder) AdminValidateLogin(adminLoginInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminValidateLogin", reflect.TypeOf((*MockAdminService)(nil).AdminValidateLogin), adminLoginInput)
}

// Create mocks base method.
func (m *MockAdminService) Create(admin *deliverymodels.AdminSignupInputs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", admin)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAdminServiceMockRecorder) Create(admin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAdminService)(nil).Create), admin)
}

// GetByEmail mocks base method.
func (m *MockAdminService) GetByEmail(email string) (*entity.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", email)
	ret0, _ := ret[0].(*entity.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockAdminServiceMockRecorder) GetByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockAdminService)(nil).GetByEmail), email)
}

// GetByID mocks base method.
func (m *MockAdminService) GetByID(id uint) (*entity.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*entity.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockAdminServiceMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockAdminService)(nil).GetByID), id)
}

// GetByPhoneNumber mocks base method.
func (m *MockAdminService) GetByPhoneNumber(phoneNumber string) (*entity.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPhoneNumber", phoneNumber)
	ret0, _ := ret[0].(*entity.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPhoneNumber indicates an expected call of GetByPhoneNumber.
func (mr *MockAdminServiceMockRecorder) GetByPhoneNumber(phoneNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPhoneNumber", reflect.TypeOf((*MockAdminService)(nil).GetByPhoneNumber), phoneNumber)
}

// OrderReport mocks base method.
func (m *MockAdminService) OrderReport(days uint) (deliverymodels.OrderReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderReport", days)
	ret0, _ := ret[0].(deliverymodels.OrderReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderReport indicates an expected call of OrderReport.
func (mr *MockAdminServiceMockRecorder) OrderReport(days interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderReport", reflect.TypeOf((*MockAdminService)(nil).OrderReport), days)
}

// Update mocks base method.
func (m *MockAdminService) Update(admin *entity.Admin) (*entity.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", admin)
	ret0, _ := ret[0].(*entity.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockAdminServiceMockRecorder) Update(admin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAdminService)(nil).Update), admin)
}

// UpdatingOrderStatus mocks base method.
func (m *MockAdminService) UpdatingOrderStatus(orderId uint) (*entity.Orders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatingOrderStatus", orderId)
	ret0, _ := ret[0].(*entity.Orders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatingOrderStatus indicates an expected call of UpdatingOrderStatus.
func (mr *MockAdminServiceMockRecorder) UpdatingOrderStatus(orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatingOrderStatus", reflect.TypeOf((*MockAdminService)(nil).UpdatingOrderStatus), orderId)
}

// UpdatingReturnOrderStatus mocks base method.
func (m *MockAdminService) UpdatingReturnOrderStatus(orderId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatingReturnOrderStatus", orderId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatingReturnOrderStatus indicates an expected call of UpdatingReturnOrderStatus.
func (mr *MockAdminServiceMockRecorder) UpdatingReturnOrderStatus(orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatingReturnOrderStatus", reflect.TypeOf((*MockAdminService)(nil).UpdatingReturnOrderStatus), orderId)
}

// UserBlockToggle mocks base method.
func (m *MockAdminService) UserBlockToggle(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserBlockToggle", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserBlockToggle indicates an expected call of UserBlockToggle.
func (mr *MockAdminServiceMockRecorder) UserBlockToggle(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserBlockToggle", reflect.TypeOf((*MockAdminService)(nil).UserBlockToggle), id)
}
